@{
    Layout = "_Layout2";
}

@model CustomerAnalyticsViewModel

<link rel="stylesheet" href="~/css/home.css" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css" rel="stylesheet">
@* <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
 *@

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

@if (TempData["ShowPopup"] != null && (bool)TempData["ShowPopup"])
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            Swal.fire({
                title: 'Success!',
                text: '@TempData["PopupMessage"]',
                icon: 'success',
                confirmButtonText: 'OK'
            });
        });
    </script>
}


<!-- Banner Section -->
<section class="banner">
    <img src="~/images/Screenshot 2025-01-06 093955.png" alt="Banner Image" class="banner-image">
</section>

<!-- Categories Section -->
<section class="categories">
    <div class="container">
        <h2>Browse By Category</h2>
        <div class="categories-list">
            <div class="category">
                <i class="fas fa-mobile-alt"></i>
                <p>Phones</p>
            </div>
            <div class="category">
                <i class="fas fa-desktop"></i>
                <p>Computers</p>
            </div>
            <div class="category">
                <i class="fas fa-laptop"></i>
                <p>Laptop</p>
            </div>
            <div class="category">
                <i class="fas fa-camera"></i>
                <p>Cameras</p>
            </div>
            <div class="category">
                <i class="fas fa-headphones"></i>
                <p>Headphones</p>
            </div>
            <div class="category">
                <i class="fas fa-gamepad"></i>
                <p>Gaming</p>
            </div>
        </div>
    </div>
</section>

<section class="charts-section">
    <div class="mother-charts-container">
        <h2 id="dashboard-title" style="margin-left: 153px;font-size: 1.8rem;color: #333;">Your Purchase Analytics</h2>
        @* <div class="date-picker">
            <label for="yearPicker">Select Year:</label>
            <input type="number" id="yearPicker" placeholder="Enter Year" min="2000" max="2100" value="2025">
            <button id="updateChartBtn">Refresh 
                <i class="fa-solid fa-arrows-rotate"></i>
            </button>
        </div> *@            
        <div class="charts">
            <div class="chart-container" style="display: flex;flex-direction: column;align-items: center; height: 450px;">
                <h3 style="text-align: center; color: #b06969;">Your Purchase Categories</h3>
                <canvas id="categoryChart"></canvas>
            </div>
            <div class="chart-container" style="height: 500px;">
                <h3 style="text-align: center; color: #b06969;">Your Spending by Month</h3>
                <canvas id="monthlySpendingChart"></canvas>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const categoryChart = new Chart(document.getElementById('categoryChart').getContext('2d'), {
            type: 'doughnut',
            data: {
                labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CategoryData.Select(c => c.Category))),
                datasets: [{
                    label: 'Categories',
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CategoryData.Select(c => c.Percentage))),
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.6)',
                        'rgba(54, 162, 235, 0.6)',
                        'rgba(255, 206, 86, 0.6)',
                        'rgba(75, 192, 192, 0.6)',
                        'rgba(153, 102, 255, 0.6)'
                    ]
                }]
            }
        });

        const spendingData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthlySpendingData.Select(m => m.TotalSpending)));
        const maxSpending = Math.max(...spendingData);
        const yMax = maxSpending > 0 ? Math.ceil(maxSpending / 10000) * 10000 : 10000;

        const monthlySpendingChart = new Chart(document.getElementById('monthlySpendingChart').getContext('2d'), {
            type: 'bar',
            data: {
                labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthlySpendingData.Select(m => m.Month))),
                datasets: [{
                    label: 'Spending (PHP)',
                    data: spendingData,
                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            min: 0,
                            max: yMax,
                            stepSize: 10000,
                            precision: 0
                        }
                    }]
                }
            }
        });

    });
</script>





@*  //      const monthlySpendingChart = new Chart(document.getElementById('monthlySpendingChart').getContext('2d'), {
   //          type: 'bar',
   //          data: {
   //              labels: Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthlySpendingData.Select(m => m.Month))),
   //              datasets: [{
   //                  label: 'Spending ($)',
   //                  data: Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthlySpendingData.Select(m => m.TotalSpending))),
   //                  backgroundColor: 'rgba(75, 192, 192, 0.6)',
   //                  borderColor: 'rgba(75, 192, 192, 1)',
   //                  borderWidth: 1
   //              }]
   //          },
   //          options: {
            // 	scales: {
            // 		y: {
            // 			beginAtZero: true
            // 		}
            // 	}
            // }
   //      });
 *@
@* // Handle Year Change
        document.getElementById('updateChartBtn').addEventListener('click', () => {
            const year = document.getElementById('yearPicker').value;

            if (!year) {
                alert('Please enter a valid year.');
                return;
            }

            // Simulate fetching data for the selected year (Replace with actual API call)
            console.log(`Fetching data for year ${year}`);
            const newCategoryData = [Math.random() * 50, Math.random() * 50, Math.random() * 50, Math.random() * 50, Math.random() * 50];
            const newMonthlyData = [Math.random() * 1000, Math.random() * 1000, Math.random() * 1000, Math.random() * 1000, Math.random() * 1000, Math.random() * 1000];

            // Update category chart
            categoryChart.data.datasets[0].data = newCategoryData;
            categoryChart.update();

            // Update monthly spending chart
            monthlySpendingChart.data.datasets[0].data = newMonthlyData;
            monthlySpendingChart.update();
        }); *@